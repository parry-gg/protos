// Tournament bracket system definitions for single and double elimination.
// Manages match progression, seeding, and bracket state tracking.
syntax = "proto3";

option java_multiple_files = true;
option java_package = "gg.parry.grpc.models";

package parrygg.models;

import "google/protobuf/timestamp.proto";
import "models/entrant.proto";

// BracketType defines the format for the bracket.
enum BracketType {
  // Default unspecified type.
  BRACKET_TYPE_UNSPECIFIED = 0;
  // Single elimination - one loss eliminates the participant.
  BRACKET_TYPE_SINGLE_ELIMINATION = 1;
  // Double elimination - participants get a second chance in losers bracket.
  BRACKET_TYPE_DOUBLE_ELIMINATION = 2;
  // Round robin - participants play all other participants at once.
  BRACKET_TYPE_ROUND_ROBIN = 3;
}

// BracketState represents the current status of bracket execution.
enum BracketState {
  // Default unspecified state.
  BRACKET_STATE_UNSPECIFIED = 0;
  // Bracket created but not yet ready for matches.
  BRACKET_STATE_PENDING = 1;
  // Bracket is seeded and ready for competition.
  BRACKET_STATE_READY = 2;
  // Matches are currently being played.
  BRACKET_STATE_IN_PROGRESS = 3;
  // All matches completed with final results.
  BRACKET_STATE_COMPLETED = 4;
}

// Bracket represents a tournament bracket containing matches and seeding.
// Next id: 12
message Bracket {
  // Unique identifier for the bracket (UUID v7).
  string id = 1;
  // Current execution state of the bracket.
  BracketState state = 2;
  // All matches within this bracket.
  repeated Match matches = 3;
  // Rules for advancing between brackets/phases.
  repeated Progression progressions = 4;
  // Ordering index within the parent phase.
  int32 index = 5;
  // Seeded positions for participants.
  repeated Seed seeds = 6;
  // Last modification timestamp.
  google.protobuf.Timestamp updated_at = 7;
  // Display name for the bracket.
  string name = 8;
  // URL-friendly identifier.
  string slug = 9;
  // Hash for detecting bracket modifications.
  string checksum = 10;
  // Bracket type.
  BracketType type = 11;
}


// MatchState tracks the progress of individual matches.
enum MatchState {
  // Default unspecified state.
  MATCH_STATE_UNSPECIFIED = 0;
  // Match created but waiting for participants.
  MATCH_STATE_PENDING = 1;
  // Both participants assigned and ready to play.
  MATCH_STATE_READY = 2;
  // Match is currently being played.
  MATCH_STATE_IN_PROGRESS = 3;
  // Match completed with final score.
  MATCH_STATE_COMPLETED = 4;
}

// Match represents an individual game between participants in a bracket.
// Contains participant slots, scoring, and progression information.
// Next id: 15
message Match {
  // Unique identifier for the match (UUID v7).
  string id = 1;
  // Human-readable match identifier (e.g., "A", "B", "ZZ").
  string identifier = 2;
  // Round number within the bracket (1-indexed).
  int32 round = 5;
  // Whether this match is on the winners side (true) or losers side (false).
  bool winners_side = 6;
  // Whether this is the grand finals match.
  bool grand_finals = 7;
  // ID of the first preceding match that feeds into this match.
  optional string prev_match_id_1 = 8;
  // ID of the second preceding match that feeds into this match.
  optional string prev_match_id_2 = 9;
  // ID of the match where the winner advances.
  optional string winners_match_id = 10;
  // ID of the match where the loser advances (double elimination).
  optional string losers_match_id = 11;
  // Current state of the match.
  MatchState state = 12;
  // Participant slots with scores and placement.
  repeated Slot slots = 13;
  // When the match state was last updated.
  google.protobuf.Timestamp state_updated_at = 14;
}

// MatchResult contains the scoring updates for a completed match.
message MatchResult {
    // Score and state updates for each participant slot.
    repeated MatchResultSlotMutation slots = 1;
}

// MatchResultSlotMutation updates scoring and state for a single participant slot.
message MatchResultSlotMutation {
  // The slot number being updated (0-indexed).
  int32 slot = 1;
  // The participant's score in the match.
  optional double score = 2;
  // The participant's final state (completed, DQ, etc.).
  optional SlotState state = 3;
}

// ProgressionBehavior controls how participants advance between brackets.
enum ProgressionBehavior {
  // Default unspecified behavior.
  PROGRESSION_BEHAVIOR_UNSPECIFIED = 0;
  // Natural progression based on match results.
  PROGRESSION_BEHAVIOR_NATURAL = 1;
  // Advance to winners side.
  PROGRESSION_BEHAVIOR_FORCE_WINNERS = 2;
  // Advance  to losers side.
  PROGRESSION_BEHAVIOR_FORCE_LOSERS = 3;
}

// Progression defines how participants advance between tournament phases.
// Controls movement from one bracket/phase to another based on placement.
// Next id: 9
message Progression {
  // Unique identifier for the progression rule (UUID v7).
  string id = 1;
  // ID of the match this progression applies to.
  string match_id = 2;
  // ID of the target phase participants advance to.
  string target_phase_id = 3;
  // ID of the target seed position in the next phase.
  string seed_id = 4;
  // Required placement in the origin match (1st, 2nd, etc.).
  int32 origin_placement = 5;
  // Projected seed number in the origin phase.
  int32 origin_seed = 6;
  // Whether this progression is for the match winner.
  bool match_winner = 7;
  // Whether advancement is to the winners side.
  bool winners_side = 8;
}

// SlotState represents the current status of a participant slot in a match.
enum SlotState {
  // Default unspecified state.
  SLOT_STATE_UNSPECIFIED = 0;
  // Slot is waiting for a participant or match to start.
  SLOT_STATE_PENDING = 1;
  // Slot has a numeric score and normal completion.
  SLOT_STATE_NUMERIC = 2;
  // Participant was disqualified from this slot.
  SLOT_STATE_DQ = 3;
  // Slot received a bye (no opponent, automatic advance).
  SLOT_STATE_BYE = 4;
}

// Slot represents a participant position within a match.
// Contains the participant, their score, and final placement.
// Next id: 6
message Slot {
  // The slot number within the match (0-indexed).
  int32 slot = 1;
  // ID of the seed that occupies this slot.
  string seed_id = 2;
  // Final placement of this participant in the match (1st, 2nd, etc.).
  int32 placement = 3;
  // The participant's score in this match.
  double score = 4;
  // Current state of this slot.
  SlotState state = 5;
}

// Seed represents a seeded position in a tournament bracket.
// Links a participant to their initial bracket position.
// Next id: 4
message Seed {
  // Unique identifier for the seed (UUID v7).
  string id = 1;
  // Seed number indicating bracket position (1 = top seed).
  int32 seed = 2;
  // The participant assigned to this seed.
  EventEntrant event_entrant = 3;
}

// SeedMutation updates the seed number of an existing seed.
message SeedMutation {
  // Updated seed number for bracket positioning.
  optional int32 seed = 2;
}

// BracketSlugId provides slug-based identification for brackets.
// Uses hierarchical tournament/event/phase/bracket structure.
message BracketSlugId {
  // URL slug of the parent tournament.
  string tournament_slug = 1;
  // URL slug of the parent event.
  string event_slug = 2;
  // URL slug of the parent phase.
  string phase_slug = 3;
  // URL slug of the bracket.
  string bracket_slug = 4;
}
